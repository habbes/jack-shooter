class SceneManager {
    field Tank hero;
    field Array bullets;
    field int bulletCount, maxBullets;
    field Array tanks;
    field int maxTanks, tankCount;
    field int currentKey;
    field int nextObjectId;
    field int lastEnemySpawnedTick;

    constructor SceneManager new () {
        let bulletCount = 0;
        let maxBullets = 20;
        let bullets = Array.new(maxBullets);
        let tankCount = 0;
        let maxTanks = 20;
        let tanks = Array.new(maxTanks);
        let nextObjectId = 1;
        return this;
    }

    method int generateId () {
        var int temp;
        let temp = nextObjectId;
        let nextObjectId = nextObjectId + 1;
        return temp;
    }

    method int getCurrentKey () {
        return currentKey;
    }
    method Tank getHero () {
        return hero;
    }

    method void spawnHero () {
        var SceneObject so;
        let hero = Tank.new(true);
        let so = hero.getSceneObject();
        do so.setCoord(Viewport.getCenterX(), Viewport.getCenterY());
        do addTank(hero);
        return;
    }

    method void addTank (Tank t) {
        var int i;
        var boolean added;
        var Tank temp;
        var SceneObject so;
        let added = false;
        if (tankCount < maxTanks) {
            let i = 0;
            while ((i < maxTanks) & (~added)) {
                let temp = tanks[i];
                if (temp = null) {
                    let tanks[i] = t;
                    let so = t.getSceneObject();
                    do so.setId(generateId());
                    do t.draw(); // force first draw cause object is created clean
                    let tankCount = tankCount + 1;
                    let added = true;
                }
                let i = i + 1;
            }
        }
        return;
    }

    method void addBullet (Bullet b) {
        var int i;
        var boolean added;
        var Bullet temp;
        var SceneObject so;
        let added = false;
        if( bulletCount < maxBullets) {
            let i = 0;
            // find empty slot in array and add bullet there
            while ((i < maxBullets) & (~added)) {
                let temp = bullets[i];
                if (temp = null) {
                    let bullets[i] = b;
                    let so = b.getSceneObject();
                    do so.setId(generateId());
                    let added = true;
                    let bulletCount = bulletCount + 1;
                }
                let i = i + 1;
            }
        }

        if (~added) {
            // dispose of bullet since it won't be tracked by scene
            do b.dispose();
        }
        return;
    }

    method void spawnEnemy (int tick) {
        var int x, y, d, i;
        var boolean added;
        var Tank e;
        var SceneObject o;
        let e = Tank.new(false);
        let o = e.getSceneObject();
        let added = false;
        let x = Random.randRange(0, Viewport.getMaxX() - 16);
        let y = Random.randRange(0, Viewport.getMaxY() - 16);
        let i = 0;
        while ((i < 3) & (~added)) {
            // try up to 3 times to find free spot
            if (isAreaFreeForObject(o)) {
                let d = Random.randRange(1, 4);
                do o.setCoord(x, y);
                do o.turn(d);
                do addTank(e);
                // let lastEnemySpawnedTick = tick;
                let added = true;
            }
            let i = i + 1;
        }
        if (~added) {
            do e.dispose();
        }
        return;        
    }

    method boolean shouldSpawnEnemy (int tick) {
        // TODO: this is a poor implementation, rewrite
        var int slots, p;
        if (tick - lastEnemySpawnedTick < 5) { return false; }
        let slots = maxTanks - tankCount;
        let p = Random.randRange(0, slots);
        return (p > 2);
    }

    method void keyPressed(int key) {
        let currentKey = key;
        return;
    }

    method void refresh (int tick) {
        // poor implementation rewrite
        // if (shouldSpawnEnemy(tick)) {
        //     do spawnEnemy(tick);
        // }
        do refreshTanks();
        do refreshBullets();
        return;
    }

    method void refreshTanks () {
        var int i;
        var Tank t;
        var SceneObject so;
        let i = 0;
        while (i < maxBullets) {
            let t = tanks[i];
            if (~(t = null)) {
                do t.onRefresh(this);
                let so = t.getSceneObject();
                if (so.shouldUpdate()) {
                    do clearLastObjectArea(so);
                    do t.draw();
                    do so.markClean();
                }
                if (t.isDead()) {
                    do t.dispose();
                    let tanks[i] = null;
                }
            }
            let i = i + 1;
        }
        return;
    }

    method void refreshBullets () {
        var int i;
        var Bullet b;
        var SceneObject so;
        let i = 0;
        while (i < maxBullets) {
            let b = bullets[i];
            if (~(b = null)) {
                do b.onRefresh(this);
                let so = b.getSceneObject();
                if (so.shouldUpdate()) {
                    do clearLastObjectArea(so);
                    if (isOutOfBounds(so) | checkBulletHits(b)) {
                        do b.dispose();
                        // recycle bullet space to create room for more bullets on the scene
                        let bullets[i] = null;
                        let bulletCount = bulletCount - 1;
                    }
                    else {
                        do b.draw();
                        do so.markClean();
                    }
                }
                
            }
            let i = i + 1;
        }
        return;
    }

    method void clearLastObjectArea (SceneObject so) {
        do Viewport.clearArea(so.getLastX(), so.getLastY(), so.getWidth(), so.getHeight());
        return;
    }

    method boolean isOutOfBounds(SceneObject o) {
        return Viewport.isAreaOutOfBounds(o.getX(), o.getY(), o.getWidth(), o.getHeight());
    }

    method boolean checkBulletHits (Bullet b) {
        var SceneObject bso, eso;
        var Tank e;
        var int i;
        let bso = b.getSceneObject();

        let e = collidesWithTank(bso);
        if (e) { do e.onShot(b); }
        return e;
    }

    method Tank collidesWithTank (SceneObject cur) {
        var Tank e;
        var SceneObject other;
        var int i;

        let i = 0;
        while (i < maxTanks) {
            let e = tanks[i];
            if (~(e = null)) {
                let other = e.getSceneObject();
                if (cur.checkCollision(other)) {
                    return e;
                }
            }
            let i = i + 1;
        }
        return null;
    }

    method Bullet collidesWithBullet (SceneObject o) {
        var Bullet b;
        var SceneObject bo;
        var int i;
        let i = 0;
        while (i < maxBullets) {
            let b = bullets[i];
            if (~(b = null)) {
                let bo = b.getSceneObject();
                if (o.checkCollision(bo)) {
                    return b;
                }
            }
            let i = i + 1;
        }
        return null;
    }

    method boolean isAreaFree (int x, int y, int w, int h, int id) {
        var SceneObject temp;
        var boolean res;
        let temp = SceneObject.new(x, y, w, h, 0, 0);
        do temp.setId(id);
        let res = isAreaFreeForObject(temp);
        do temp.dispose();
        return res;
    }

    method boolean isAreaFreeForObject (SceneObject so) {
        var SceneObject other;
        var Tank e;
        var int i;

        let e = collidesWithTank(so);
        if (~(e = null)) {
            return false;
        }

        return true;
    }

    method void dispose () {
        var int i;
        var Bullet b;
        var Tank e;

        // dispose of tanks
        let i = 0;
        while (i < maxTanks) {
            let e = tanks[i];
            if (~(e = null)) {
                do e.dispose();
            }
            let i = i + 1;
        }
        do tanks.dispose();

        // dipose of bullets
        let i = 0;
        while (i < maxBullets) {
            let b = bullets[i];
            if (~(b = null)) {
                do b.dispose();
            }
            let i = i + 1;
        }
        do bullets.dispose();


        do Memory.deAlloc(this);
        return;
    }
}