/**
 * helper class with additional screen management functions
 * relevant to the game
 */
class Viewport {

    function boolean white () {
        return false;
    }

    function boolean black () {
        return true;
    }

    function int getWidth () {
        return 512;
    }

    function int getHeight () {
        return 256;
    }

    function int getMaxX () {
        return 511;
    }

    function int getMaxY () {
        return 255;
    }

    function Coord getMax () {
        return Coord.new(Viewport.getMaxX(), Viewport.getMaxY());
    }

    function int getCenterX () {
        return Viewport.getMaxX() / 2;
    }

    function int getCenterY () {
        return Viewport.getMaxY() / 2;
    }

    function Coord getCenter () {
        return Coord.new(Viewport.getCenterX(), Viewport.getCenterY());
    }

    function int getAddress () {
        return 16384;
    }

    function void clearScreen () {
        do Viewport.clearArea(Coord.origin(), Viewport.getMaxX(), Viewport.getMaxY());
        return;
    }
    
    function void fillScreen () {
        do Viewport.fillArea(Coord.origin(), Viewport.getWidth(), Viewport.getHeight());
        return;
    }
    
    function void fillArea (Coord c, int width, int height) {
        do Viewport.colorArea(Viewport.black(), c, width, height);
        return;
    }

    function void clearArea (Coord c, int width, int height) {
        do Viewport.colorArea(Viewport.white(), c, width, height);
        return;
    }

    /**
     * fill the specified area on the screen with the specified color
     * @param color
     * @param tl the top-left coordinate of the area
     * @param width the width of the area
     * @param height the height of the area
     */
    function void colorArea (boolean color, Coord tl, int width, int height) {
        var Coord br;
        let br = tl.move(width - 1, height - 1);
        do Screen.setColor(color);
        do Screen.drawRectangle(tl.getX(), tl.getY(), br.getX(), br.getY());
        return;
    }

    function int coordsToAddress (Coord c) {
        var int base;
        let base = (c.getX() / 16) + (32 * c.getY());
        return Viewport.getAddress() + base;
    }

    function void pokeShape (Coord c, Array shape) {
        var int memAddress, i;
        let memAddress = Viewport.coordsToAddress(c);
        let i = 0;
        while ( i < 16) {
            do Memory.poke(memAddress + (32 * i), shape[i]);
            let i = i + 1;
        }
        return;
    }

    function void pokeClear (Coord c) {
        var Array shape;
        var int i;
        let shape = Array.new(16);
        let i = 0;
        while (i < 16) { 
            let shape[i] = 0; 
            let i = i + 1;
        }
        do Viewport.pokeShape(c, shape);
        return;
    }
}