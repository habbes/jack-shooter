/**
 * helper class with additional screen management functions
 * relevant to the game
 */
class Viewport {

    function boolean getWhite () {
        return false;
    }

    function boolean getBlack () {
        return true;
    }

    function int getWidth () {
        return 512;
    }

    function int getHeight () {
        return 256;
    }

    function int getMaxX () {
        return 511;
    }

    function int getMaxY () {
        return 255;
    }

    function int getCenterX () {
        return Viewport.getMaxX() / 2;
    }

    function int getCenterY () {
        return Viewport.getMaxY() / 2;
    }

    function int getAddress () {
        return 16384;
    }

    function void clearScreen () {
        do Viewport.clearArea(0, 0, Viewport.getMaxX(), Viewport.getMaxY());
        return;
    }
    
    function void fillScreen () {
        do Viewport.fillArea(0, 0, Viewport.getMaxX(), Viewport.getMaxY());
        return;
    }
    
    function void fillArea (int x, int y, int width, int height) {
        do Viewport.colorArea(Viewport.getBlack(), x, y, width, height);
        return;
    }

    function void clearArea (int x, int y, int width, int height) {
        do Viewport.colorArea(Viewport.getWhite(), x, y, width, height);
        return;
    }

    function void colorArea (boolean color, int x, int y, int width, int height) {
        do Screen.setColor(color);
        do Screen.drawRectangle(x, y, x + width, y + height);
        return;
    }

    function int coordsToAddress (int x, int y) {
        var int base;
        let base = (x / 16) + (32 * y);
        return Viewport.getAddress() + base;
    }

    function void pokeShape (int x, int y, Array shape) {
        var int memAddress, i;
        let memAddress = Viewport.coordsToAddress(x, y);
        let i = 0;
        while ( i < 16) {
            do Memory.poke(memAddress + (32 * i), shape[i]);
            let i = i + 1;
        }
        return;
    }

    function void pokeClear (int x, int y) {
        var Array shape;
        var int i;
        let shape = Array.new(16);
        let i = 0;
        while (i < 16) { 
            let shape[i] = 0; 
            let i = i + 1;
        }
        do Viewport.pokeShape(x, y, shape);
        return;
    }
}