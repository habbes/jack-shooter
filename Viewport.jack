/**
 * helper class with additional screen management functions
 * relevant to the game
 */
class Viewport {

    /**
     * boolean corresponding to color white
     */
    function boolean white () {
        return false;
    }

    /**
     * boolean corresponding to color black
     */
    function boolean black () {
        return true;
    }

    /**
     * gets the width of the viewport
     */
    function int getWidth () {
        return 512;
    }

    /**
     * gets the height of the viewport
     */
    function int getHeight () {
        return 256;
    }

    /**
     * gets the maximum x coordinate of the viewport
     */
    function int getMaxX () {
        return 511;
    }

    /**
     * returns the maximum y coordinate of the viewport
     */
    function int getMaxY () {
        return 255;
    }

    /**
     * checks whether the area defined by the specified coordinates
     * is outside the bounds of the viewport
     * @param x
     * @param y
     * @param w
     * @param h
     */
    function boolean isAreaOutOfBounds (int x, int y, int w, int h) {
        if (x < 0) { return true; }
        if (y < 0) { return true; }
        if ((x + w) > 511) { return true; }
        if ((y + h) > 255) { return true; }
        return false;
    }

    /**
     * returns the x coordinate of the viewport's center
     */
    function int getCenterX () {
        return 255;
    }

    /**
     * returns the y coordinate of the viewport's center
     */
    function int getCenterY () {
        return 128;
    }

    /**
     * get the offset address of the screen memory
     */
    function int getAddress () {
        return 16384;
    }

    /**
     * covers the entire screen with the background color
     */
    function void clearScreen () {
        do Viewport.clearArea(0, 0, Viewport.getWidth(), Viewport.getHeight());
        return;
    }
    
    /**
     * fills the entire screen white
     */
    function void fillScreen () {
        do Viewport.fillArea(0, 0, Viewport.getWidth(), Viewport.getHeight());
        return;
    }
    
    /**
     * fills the area delimited by the specified rectangle on 
     * the screen with black paint
     * @param x x-coordinate of the top-left corner of the rectangle
     * @param y y-coordinate of the top-left cornder of the rectangle
     * @param w width of the rectangle
     * @param h height of the rectangle
     */
    function void fillArea (int x, int y, int w, int h) {
        do Viewport.colorArea(Viewport.black(), x, y, w, h);
        return;
    }

    /**
     * clears the area delimited by the specified rectangle
     * on the screen (fills with white paint)
     * @param x x-coordinate of the top-left corner of the rectangle
     * @param y y-coordinate of the top-right corner of the rectangle
     * @param w width of the rectangle
     * @param h height of the rectangle
     */
    function void clearArea (int x, int y, int w, int h) {
        do Viewport.colorArea(Viewport.white(), x, y, w, h);
        return;
    }

    /**
     * fill the specified area on the screen with the specified color
     * @param c
     * @param x
     * @para, y
     * @param width the width of the area
     * @param height the height of the area
     */
    function void colorArea (boolean c, int x, int y, int w, int h) {
        do Screen.setColor(c);
        do Screen.drawRectangle(x, y, (x + w) - 1, (y + h) - 1);
        return;
    }

    /**
     * converts the specified coordinates on the screen to a memory
     * address
     * @param x x coordinate
     * @param y y coordinate
     * @return memory address with the screen offset accounted for
     */
    function int coordsToAddress (int x, int y) {
        var int base;
        let base = (x / 16) + (y * 32);
        return Viewport.getAddress() + base;
    }

    function void pokeShape (int x, int y, Array shape) {
        var int memAddress, i;
        let memAddress = Viewport.coordsToAddress(x, y);
        let i = 0;
        while ( i < 16) {
            do Memory.poke(memAddress + (32 * i), shape[i]);
            let i = i + 1;
        }
        return;
    }

    function void pokeClear (int x, int y) {
        var Array shape;
        var int i;
        let shape = Array.new(16);
        let i = 0;
        while (i < 16) { 
            let shape[i] = 0; 
            let i = i + 1;
        }
        do Viewport.pokeShape(x, y, shape);
        do shape.dispose();
        return;
    }
}